Index: app/src/main/java/com/example/parentingapp/ui/ScoreDetailActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.parentingapp.ui\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.activity.viewModels\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.parentingapp.adapter.CourseAdapter\r\nimport com.example.parentingapp.adapter.ScoreAdapter\r\nimport com.example.parentingapp.data.Input\r\nimport com.example.parentingapp.data.Score\r\nimport com.example.parentingapp.databinding.ActivityScoreDetailBinding\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.loopj.android.http.AsyncHttpClient\r\nimport com.loopj.android.http.AsyncHttpResponseHandler\r\nimport com.loopj.android.http.RequestParams\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport cz.msebera.android.httpclient.Header\r\nimport cz.msebera.android.httpclient.entity.StringEntity\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport retrofit2.http.Headers\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass ScoreDetailActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityScoreDetailBinding\r\n    private lateinit var auth: FirebaseAuth\r\n    private val viewModel: ScoreViewModel by viewModels()\r\n    var db = Firebase.firestore\r\n    var listInput: ArrayList<Any> = ArrayList(4)\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityScoreDetailBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n//        val input = Input(listInput)\r\n        val course = intent.getStringExtra(EXTRA_COURSE)\r\n\r\n        binding.courseName.text = course\r\n        binding.backIcon.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        binding.rvScore.setHasFixedSize(true)\r\n        val layoutManager = LinearLayoutManager(this)\r\n        binding.rvScore.layoutManager = layoutManager\r\n\r\n        auth = Firebase.auth\r\n        val userId = auth.currentUser?.uid.toString()\r\n\r\n        val score =\r\n            db.collection(\"student\").document(userId).collection(\"userData\").document(userId)\r\n        score.get()\r\n            .addOnSuccessListener {\r\n                if (it != null) {\r\n//                    Log.d(\"success\", \"DocumentSnapshot data: ${it.data}\")\r\n                    binding.studentName.text = it.data?.get(\"name\") as String\r\n                    binding.studentGrade.text = it.data?.get(\"class\") as String\r\n                    binding.studentSemester.text = it.data?.get(\"angkatan\") as String\r\n                    getData(userId, course)\r\n//                    viewModel.getPredict(listInput)\r\n                } else {\r\n                    Log.d(\"failed\", \"Data doesn't exist\")\r\n                }\r\n            }\r\n        Log.d(\"TAG\", listInput.toString())\r\n\r\n//        viewModel.predict.observe(this) { data->\r\n//            binding.status.text = data.results.toString()\r\n//        }\r\n//        val score = db.collection(\"student/$userId/userData\").whereEqualTo(\"userData\", userId)\r\n//        score.get()\r\n//            .addOnSuccessListener {\r\n//                if (it != null) {\r\n//                    binding.studentName.text = it.documents[0].data?.get(\"name\") as String\r\n//                    binding.studentGrade.text = it.documents[0].data?.get(\"class\") as String\r\n//                    binding.studentSemester.text = it.documents[0].data?.get(\"angkatan\") as String\r\n//                }\r\n//            }\r\n//        score.get()\r\n//            .addOnCompleteListener{\r\n//                if (FirebaseAuth.getInstance().currentUser != null) {\r\n//                    binding.studentName.text = it.result.get(\"name\").toString()\r\n//                }\r\n//            }\r\n\r\n//        getData(userId)\r\n    }\r\n\r\n    private fun getData(userId: String, course: String?) {\r\n        var listScore: ArrayList<Score> = ArrayList()\r\n//        var input1: ArrayList<Int> = ArrayList()\r\n//        var input2: ArrayList<Int> = ArrayList()\r\n//        var avg1: Double\r\n//        var avg2: Double\r\n        db.collection(\"student\").document(userId).collection(\"Score\").document(userId).collection(course.toString()).document(userId)\r\n            .get()\r\n//            .addOnSuccessListener { results ->\r\n//                var listScore: ArrayList<Score> = ArrayList()\r\n//                if ( resul) {\r\n\r\n//                }\r\n//            }\r\n            .addOnCompleteListener {\r\n                var score: Score\r\n                if (it.isSuccessful) {\r\n                    val data = it.result.data\r\n                    data?.let {\r\n                        for ((_, value) in data) {\r\n                            val v = value as Map<*, *>\r\n                            val name = v[\"Nama\"]\r\n                            val nilai = v[\"Nilai\"]\r\n                            val kkm = v[\"KKM\"]\r\n                            score = Score(\r\n                                \"$name\",\r\n                                \"$nilai\",\r\n                                \"$kkm\"\r\n                            )\r\n//                            if (name == \"Ulangan Harian 1\" || name == \"Ulangan Harian 2\" || name == \"Ulangan Harian 3\"){\r\n//                                input1.add(nilai.toString().toInt())\r\n//                            }\r\n//                            if (name == \"Ulangan Harian 4\" || name == \"Ulangan Harian 5\" || name == \"Ulangan Harian 6\"){\r\n//                                input2.add(nilai.toString().toInt())\r\n//                            }\r\n                            if (name == \"UTS\" || name == \"UAS\") listInput.add(nilai.toString().toDouble())\r\n                            listScore.add(score)\r\n//                            Log.d(\"TAG\", \"$score\")\r\n//                            v.mapValues { it ->\r\n//                                val (name, score, kkm) = it.value as List<*>\r\n//\r\n//                                Score(\r\n//                                    name as String,\r\n//                                    score as String,\r\n//                                    kkm as String\r\n//                                )\r\n//\r\n//                                listScore.add(Score(name, score, kkm))\r\n//                            }\r\n                        }\r\n                    }\r\n//                    avg1 = input1.average()\r\n//                    avg2 = input2.average()\r\n//                    listInput.add(avg1.toInt())\r\n//                    listInput.add(avg2.toInt())\r\n//                    binding.daftarNilai.text = listInput[0].toString()\r\n                    listInput.add(95)\r\n                    listInput.add(100)\r\n                    listInput.add(1)\r\n                    listInput.add(0)\r\n                    Log.d(\"TAG\", listInput.toString())\r\n                    val client = AsyncHttpClient()\r\n                    val url = \"https://backendsema-x6blq7wjaa-et.a.run.app/api/predict\"\r\n\r\n//                    val params = RequestParams(listInput)\r\n//                    params.put(\"input_data\", listInput)\r\n\r\n                    val array = JSONArray(listInput)\r\n                    val jsonString = array.toString()\r\n                    val params = StringEntity(jsonString)\r\n\r\n//                    val params = RequestParams()\r\n//                    params.put(\"input_data\", listInput)\r\n\r\n//                    client.addHeader(\"Content-Type\", \"application/json\")\r\n\r\n                    params.setContentType(\"application/json\")\r\n                    client.post(applicationContext, url, params, \"application/json\", object : AsyncHttpResponseHandler() {\r\n                        override fun onSuccess(\r\n                            statusCode: Int,\r\n                            headers: Array<out Header>,\r\n                            responseBody: ByteArray\r\n                        ) {\r\n                            val result = String(responseBody)\r\n                            Log.d(\"TAG\", result)\r\n                            try {\r\n                                val responseObject = JSONObject(result)\r\n                                val quote = responseObject.getDouble(\"results\")\r\n                                binding.status.text = quote.toString()\r\n                            } catch (e: Exception) {\r\n                                Toast.makeText(this@ScoreDetailActivity, e.message, Toast.LENGTH_SHORT).show()\r\n                                e.printStackTrace()\r\n                            }\r\n                        }\r\n                        override fun onFailure(\r\n                            statusCode: Int,\r\n                            headers: Array<out Header>,\r\n                            responseBody: ByteArray?,\r\n                            error: Throwable?\r\n                        ) {\r\n                            headers?.let {\r\n                                val errorMessage = when (statusCode) {\r\n                                    400 -> \"$statusCode : Bad Request\"\r\n                                    401 -> \"$statusCode : Unauthorized\"\r\n                                    403 -> \"$statusCode : Forbidden\"\r\n                                    404 -> \"$statusCode : Not Found\"\r\n                                    else -> \"$statusCode : ${error?.message}\"\r\n                                }\r\n                                Toast.makeText(this@ScoreDetailActivity, errorMessage, Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                    })\r\n                    val adapter = ScoreAdapter(listScore)\r\n                    binding.rvScore.adapter = adapter\r\n                }\r\n            }\r\n//        Log.d(\"TAG\", listInput.toString())\r\n\r\n//        viewModel.getPredict(listInput)\r\n//        viewModel.predict.observe(this) { data->\r\n//            binding.status.text = data.results.toString()\r\n//        }\r\n    }\r\n\r\n    companion object {\r\n        const val EXTRA_COURSE = \"extra_course\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/parentingapp/ui/ScoreDetailActivity.kt b/app/src/main/java/com/example/parentingapp/ui/ScoreDetailActivity.kt
--- a/app/src/main/java/com/example/parentingapp/ui/ScoreDetailActivity.kt	(revision 41fa08bfd44f3788f20f77d31c0612709e23fb9e)
+++ b/app/src/main/java/com/example/parentingapp/ui/ScoreDetailActivity.kt	(date 1686673327889)
@@ -150,8 +150,8 @@
 //                    listInput.add(avg1.toInt())
 //                    listInput.add(avg2.toInt())
 //                    binding.daftarNilai.text = listInput[0].toString()
-                    listInput.add(95)
-                    listInput.add(100)
+//                    listInput.add(95)
+//                    listInput.add(100)
                     listInput.add(1)
                     listInput.add(0)
                     Log.d("TAG", listInput.toString())
